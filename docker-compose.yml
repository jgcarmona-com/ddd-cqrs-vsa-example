version: '3.4'

networks:
  qna-network:
    driver: bridge

services:
  jgcarmona.qna.api:
    image: ${DOCKER_REGISTRY-}jgcarmonaqnaapi
    networks:
      - qna-network
    build:
      context: .
      dockerfile: src/Jgcarmona.Qna.Api/Dockerfile
    ports:
      - "7100:7100"  # HTTP
      - "7101:7001"  # HTTPS
    depends_on:
      - sqlserver
      - rabbitmq
      - seq
      - mongo
      - jgcarmona.qna.services.syncservice
      - jgcarmona.qna.services.statsservice
      - jgcarmona.qna.services.notificationservice
    volumes:
      - ${USERPROFILE}/.aspnet/https:/https/

  jgcarmona.qna.services.syncservice:
    image: ${DOCKER_REGISTRY-}jgcarmonaqnaservicessyncservice
    networks:
      - qna-network
    build:
      context: .
      dockerfile: src/Jgcarmona.Qna.Services.SyncService/Dockerfile    
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_ENVIRONMENT=Development
    depends_on:
      - rabbitmq
      - seq
      - mongo

  jgcarmona.qna.services.statsservice:
    image: ${DOCKER_REGISTRY-}jgcarmonaqnaservicesstatsservice
    networks:
      - qna-network
    build:
      context: .
      dockerfile: src/Jgcarmona.Qna.Services.StatsService/Dockerfile   
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_ENVIRONMENT=Development
    depends_on:
      - rabbitmq
      - seq
      - mongo

  jgcarmona.qna.services.notificationservice:
    image: ${DOCKER_REGISTRY-}jgcarmonaqnaservicesnotificationservice
    networks:
      - qna-network
    build:
      context: .
      dockerfile: src/Jgcarmona.Qna.Services.NotificationService/Dockerfile   
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_ENVIRONMENT=Development
    depends_on:
      - rabbitmq
      - seq

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    networks:
      - qna-network
    user: root
    container_name: SqlServerContainer
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "YourStrong@Passw0rd"
    ports:
      - "1433:1433"
    volumes:
      - ./infrastructure/docker/sqlserver-data:/var/opt/mssql/data

  rabbitmq:
    image: rabbitmq:3-management
    networks:
      - qna-network
    hostname: rabbitmq
    container_name: RabbitMqContainer
    environment:
      RABBITMQ_DEFAULT_USER: qnauser
      RABBITMQ_DEFAULT_PASS: P@ssw0rd!
    ports:
      - "5672:5672"  # AMQP
      - "15672:15672" # Management
    volumes:
      - ./infrastructure/docker/rabbitmq-data:/var/lib/rabbitmq

  seq:
    image: datalust/seq:latest
    networks:
      - qna-network
    container_name: SeqContainer
    environment:
      ACCEPT_EULA: "Y"
      SEQ_API_KEY: "SeqApiKey"
    ports:
      - "5341:80"  # Web interface
      - "5342:443" # HTTPS interface
    volumes:
      - ./infrastructure/docker/seq-data:/data

  mongo:
    image: mongo:latest
    networks:
      - qna-network
    container_name: MongoDbContainer
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: examplepassword
    ports:
      - "27017:27017"
    volumes:
      - ./infrastructure/docker/mongo-data:/data/db

  mongo-express:
    image: mongo-express:latest
    networks:
      - qna-network
    container_name: MongoExpressContainer
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: examplepassword
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_URL: mongodb://root:examplepassword@mongo:27017/
    ports:
      - "8081:8081"
    restart: on-failure
    depends_on:
      - mongo